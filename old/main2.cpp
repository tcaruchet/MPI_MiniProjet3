#define N_DIM 4   

#include<stdio.h> 
#include<stdlib.h>
#include<omp.h>   
#include<math.h>  
#include<time.h>
#include<string.h>
#include<mpi.h>
int main(int argc,char const*argv[]){std::string file_matrix_name=argv[4];std::string file_vector_name=argv[5];if(N_DIM%size){MPI_Finalize();return(0);}int rank,size;MPI_Init(&argc,&argv);MPI_Comm_rank(MPI_COMM_WORLD,&rank);MPI_Comm_size(MPI_COMM_WORLD,&size);int i,j,k,l;int n=N_DIM;int p=size;int n_lines=n/p;double matrix_data[N_DIM][N_DIM];double vector_data[N_DIM];double result[N_DIM]={0.0};if(rank==0){read_mat_from_file(file_matrix_name,N_DIM,N_DIM,(double*)matrix_data);read_mat_from_file(file_vector_name,N_DIM,1,vector_data);}RowMatrixVectorMultiply(N_DIM,(double*)matrix_data,vector_data,result);if(rank==0){printf("Matrix :\n");for(int i=0;i<N_DIM;i++){for(int j=0;j<N_DIM;j++)printf("%.5f ",matrix_data[i][j]);printf("\n");}printf("Vector :\n");for(int i=0;i<N_DIM;i++)printf("%.5f ",vector_data[i]);printf("\n\n");printf("Vector :\n");for(int i=0;i<N_DIM;i++)printf("%.5f ",vector_data[i]);printf("\n\n");printf("Result :\n");for(int i=0;i<N_DIM;i++)printf("%.5f ",result[i]);printf("\n\n");}if(rank==0){printf("\n");for(i=0;i<N_DIM;i++){printf("%f\n",result_gather[i]);}}MPI_Finalize();return 0;}void read_mat_from_file(char*filename,int n_rows,int n_cols,double*matrix_data){FILE*fp;fp=fopen(filename,"r");if(fp==NULL){printf("Error opening file!\n");exit(1);}int i,j;for(i=0;i<n_rows;i++){for(j=0;j<n_cols;j++){fscanf(fp,"%lf",&matrix_data[i*n_cols+j]);}}fclose(fp);}void RowMatrixVectorMultiply(int n,double*matrix_data,double*vector_data,double*result){int rank,size;MPI_Status status;MPI_Comm_rank(MPI_COMM_WORLD,&rank);MPI_Comm_size(MPI_COMM_WORLD,&size);double*localresult=new double[dim/size]{};double matrix [dim][dim];double timer=MPI_Wtime();int i,j,k;if(rank==0){for(int i=0;i<dim/size;i++)for(int j=0;j<dim;j++)matrix[i][j]=matrix_data[j+(dim*i)];for(int i=1;i<size;i++){MPI_Send(matrix_data+((dim*dim/size)*(i)),(dim*dim)/size,MPI_DOUBLE,i,0,MPI_COMM_WORLD);}}else{MPI_Recv(matrix,dim*dim/size,MPI_DOUBLE,0,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);}if(rank==0){for(int i=0;i<size;i++){if(i!=rank){MPI_Send(vector_data,dim,MPI_DOUBLE,i,0,MPI_COMM_WORLD);}}}else{MPI_Recv(vector_data,dim,MPI_DOUBLE,0,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);}for(i=0;i<dim/size;i++){for(j=0;j<dim;j++){for(k=0;k<dim;k++){localresult[i]+=matrix[i][k]*vector_data[k];}}}if(rank==0){for(int i=0;i<dim/size;i++)result[i]=localresult[i];for(int i=1;i<size;i++){MPI_Recv(result+((dim/size)*(i)),(dim)/size,MPI_DOUBLE,i,0,MPI_COMM_WORLD,MPI_STATUS_IGNORE);}}else MPI_Send(localresult,dim/size,MPI_DOUBLE,0,0,MPI_COMM_WORLD);timer=MPI_Wtime()-timer;if(rank==0)cout<<"Time Needed for all ops="<<timer<<endl;delete[] localresult;return;}